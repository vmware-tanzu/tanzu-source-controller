//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 VMware, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	fmtx "fmt"

	v1 "dies.dev/apis/meta/v1"
	apis "github.com/vmware-labs/reconciler-runtime/apis"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"

	sourcev1alpha1 "github.com/vmware-tanzu/tanzu-source-controller/apis/source/v1alpha1"
)

var ImageRepositoryBlank = (&ImageRepositoryDie{}).DieFeed(sourcev1alpha1.ImageRepository{})

type ImageRepositoryDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       sourcev1alpha1.ImageRepository
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ImageRepositoryDie) DieImmutable(immutable bool) *ImageRepositoryDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ImageRepositoryDie) DieFeed(r sourcev1alpha1.ImageRepository) *ImageRepositoryDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ImageRepositoryDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ImageRepositoryDie) DieFeedPtr(r *sourcev1alpha1.ImageRepository) *ImageRepositoryDie {
	if r == nil {
		r = &sourcev1alpha1.ImageRepository{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ImageRepositoryDie) DieFeedRawExtension(raw runtime.RawExtension) *ImageRepositoryDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.ImageRepository{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ImageRepositoryDie) DieRelease() sourcev1alpha1.ImageRepository {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ImageRepositoryDie) DieReleasePtr() *sourcev1alpha1.ImageRepository {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ImageRepositoryDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ImageRepositoryDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ImageRepositoryDie) DieStamp(fn func(r *sourcev1alpha1.ImageRepository)) *ImageRepositoryDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ImageRepositoryDie) DeepCopy() *ImageRepositoryDie {
	r := *d.r.DeepCopy()
	return &ImageRepositoryDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ImageRepositoryDie)(nil)

func (d *ImageRepositoryDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ImageRepositoryDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ImageRepositoryDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ImageRepositoryDie) UnmarshalJSON(b []byte) error {
	if d == ImageRepositoryBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &sourcev1alpha1.ImageRepository{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ImageRepositoryDie) APIVersion(v string) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ImageRepositoryDie) Kind(v string) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ImageRepositoryDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ImageRepositoryDie) SpecDie(fn func(d *ImageRepositorySpecDie)) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		d := ImageRepositorySpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ImageRepositoryDie) StatusDie(fn func(d *ImageRepositoryStatusDie)) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		d := ImageRepositoryStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ImageRepositoryDie) Spec(v sourcev1alpha1.ImageRepositorySpec) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		r.Spec = v
	})
}

func (d *ImageRepositoryDie) Status(v sourcev1alpha1.ImageRepositoryStatus) *ImageRepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepository) {
		r.Status = v
	})
}

var ImageRepositorySpecBlank = (&ImageRepositorySpecDie{}).DieFeed(sourcev1alpha1.ImageRepositorySpec{})

type ImageRepositorySpecDie struct {
	mutable bool
	r       sourcev1alpha1.ImageRepositorySpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ImageRepositorySpecDie) DieImmutable(immutable bool) *ImageRepositorySpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ImageRepositorySpecDie) DieFeed(r sourcev1alpha1.ImageRepositorySpec) *ImageRepositorySpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ImageRepositorySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ImageRepositorySpecDie) DieFeedPtr(r *sourcev1alpha1.ImageRepositorySpec) *ImageRepositorySpecDie {
	if r == nil {
		r = &sourcev1alpha1.ImageRepositorySpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ImageRepositorySpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ImageRepositorySpecDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.ImageRepositorySpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ImageRepositorySpecDie) DieRelease() sourcev1alpha1.ImageRepositorySpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ImageRepositorySpecDie) DieReleasePtr() *sourcev1alpha1.ImageRepositorySpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ImageRepositorySpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ImageRepositorySpecDie) DieStamp(fn func(r *sourcev1alpha1.ImageRepositorySpec)) *ImageRepositorySpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ImageRepositorySpecDie) DeepCopy() *ImageRepositorySpecDie {
	r := *d.r.DeepCopy()
	return &ImageRepositorySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Image is a reference to an image in a remote repository
func (d *ImageRepositorySpecDie) Image(v string) *ImageRepositorySpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositorySpec) {
		r.Image = v
	})
}

// The interval at which to check for repository updates.
func (d *ImageRepositorySpecDie) Interval(v metav1.Duration) *ImageRepositorySpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositorySpec) {
		r.Interval = v
	})
}

// ImagePullSecrets contains the names of the Kubernetes Secrets containing registry login information to resolve image metadata.
func (d *ImageRepositorySpecDie) ImagePullSecrets(v ...corev1.LocalObjectReference) *ImageRepositorySpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositorySpec) {
		r.ImagePullSecrets = v
	})
}

// ServiceAccountName is the name of the Kubernetes ServiceAccount used to authenticate the image pull if the service account has attached pull secrets. For more information: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#add-imagepullsecrets-to-a-service-account
func (d *ImageRepositorySpecDie) ServiceAccountName(v string) *ImageRepositorySpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositorySpec) {
		r.ServiceAccountName = v
	})
}

var ImageRepositoryStatusBlank = (&ImageRepositoryStatusDie{}).DieFeed(sourcev1alpha1.ImageRepositoryStatus{})

type ImageRepositoryStatusDie struct {
	mutable bool
	r       sourcev1alpha1.ImageRepositoryStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ImageRepositoryStatusDie) DieImmutable(immutable bool) *ImageRepositoryStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ImageRepositoryStatusDie) DieFeed(r sourcev1alpha1.ImageRepositoryStatus) *ImageRepositoryStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ImageRepositoryStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ImageRepositoryStatusDie) DieFeedPtr(r *sourcev1alpha1.ImageRepositoryStatus) *ImageRepositoryStatusDie {
	if r == nil {
		r = &sourcev1alpha1.ImageRepositoryStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ImageRepositoryStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ImageRepositoryStatusDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.ImageRepositoryStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ImageRepositoryStatusDie) DieRelease() sourcev1alpha1.ImageRepositoryStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ImageRepositoryStatusDie) DieReleasePtr() *sourcev1alpha1.ImageRepositoryStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ImageRepositoryStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ImageRepositoryStatusDie) DieStamp(fn func(r *sourcev1alpha1.ImageRepositoryStatus)) *ImageRepositoryStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ImageRepositoryStatusDie) DeepCopy() *ImageRepositoryStatusDie {
	r := *d.r.DeepCopy()
	return &ImageRepositoryStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ImageRepositoryStatusDie) Status(v apis.Status) *ImageRepositoryStatusDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositoryStatus) {
		r.Status = v
	})
}

// URL is the download link for the artifact output of the last repository sync.
func (d *ImageRepositoryStatusDie) URL(v string) *ImageRepositoryStatusDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositoryStatus) {
		r.URL = v
	})
}

// Artifact represents the output of the last successful repository sync.
func (d *ImageRepositoryStatusDie) Artifact(v *sourcev1alpha1.Artifact) *ImageRepositoryStatusDie {
	return d.DieStamp(func(r *sourcev1alpha1.ImageRepositoryStatus) {
		r.Artifact = v
	})
}

var ArtifactBlank = (&ArtifactDie{}).DieFeed(sourcev1alpha1.Artifact{})

type ArtifactDie struct {
	mutable bool
	r       sourcev1alpha1.Artifact
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ArtifactDie) DieImmutable(immutable bool) *ArtifactDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ArtifactDie) DieFeed(r sourcev1alpha1.Artifact) *ArtifactDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ArtifactDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ArtifactDie) DieFeedPtr(r *sourcev1alpha1.Artifact) *ArtifactDie {
	if r == nil {
		r = &sourcev1alpha1.Artifact{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ArtifactDie) DieFeedRawExtension(raw runtime.RawExtension) *ArtifactDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.Artifact{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ArtifactDie) DieRelease() sourcev1alpha1.Artifact {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ArtifactDie) DieReleasePtr() *sourcev1alpha1.Artifact {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ArtifactDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ArtifactDie) DieStamp(fn func(r *sourcev1alpha1.Artifact)) *ArtifactDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ArtifactDie) DeepCopy() *ArtifactDie {
	r := *d.r.DeepCopy()
	return &ArtifactDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Path is the relative file path of this artifact.
func (d *ArtifactDie) Path(v string) *ArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.Artifact) {
		r.Path = v
	})
}

// URL is the HTTP address of this artifact.
func (d *ArtifactDie) URL(v string) *ArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.Artifact) {
		r.URL = v
	})
}

// Revision is a human readable identifier traceable in the origin source system. It can be a Git commit SHA, Git tag, a Helm index timestamp, a Helm chart version, etc.
func (d *ArtifactDie) Revision(v string) *ArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.Artifact) {
		r.Revision = v
	})
}

// Checksum is the SHA1 checksum of the artifact.
func (d *ArtifactDie) Checksum(v string) *ArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.Artifact) {
		r.Checksum = v
	})
}

// LastUpdateTime is the timestamp corresponding to the last update of this artifact.
func (d *ArtifactDie) LastUpdateTime(v metav1.Time) *ArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.Artifact) {
		r.LastUpdateTime = v
	})
}

var MavenArtifactBlank = (&MavenArtifactDie{}).DieFeed(sourcev1alpha1.MavenArtifact{})

type MavenArtifactDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       sourcev1alpha1.MavenArtifact
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MavenArtifactDie) DieImmutable(immutable bool) *MavenArtifactDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MavenArtifactDie) DieFeed(r sourcev1alpha1.MavenArtifact) *MavenArtifactDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &MavenArtifactDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MavenArtifactDie) DieFeedPtr(r *sourcev1alpha1.MavenArtifact) *MavenArtifactDie {
	if r == nil {
		r = &sourcev1alpha1.MavenArtifact{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactDie) DieFeedRawExtension(raw runtime.RawExtension) *MavenArtifactDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.MavenArtifact{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *MavenArtifactDie) DieRelease() sourcev1alpha1.MavenArtifact {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MavenArtifactDie) DieReleasePtr() *sourcev1alpha1.MavenArtifact {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *MavenArtifactDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MavenArtifactDie) DieStamp(fn func(r *sourcev1alpha1.MavenArtifact)) *MavenArtifactDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MavenArtifactDie) DeepCopy() *MavenArtifactDie {
	r := *d.r.DeepCopy()
	return &MavenArtifactDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*MavenArtifactDie)(nil)

func (d *MavenArtifactDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *MavenArtifactDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *MavenArtifactDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *MavenArtifactDie) UnmarshalJSON(b []byte) error {
	if d == MavenArtifactBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &sourcev1alpha1.MavenArtifact{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *MavenArtifactDie) APIVersion(v string) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *MavenArtifactDie) Kind(v string) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *MavenArtifactDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *MavenArtifactDie) SpecDie(fn func(d *MavenArtifactSpecDie)) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		d := MavenArtifactSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *MavenArtifactDie) StatusDie(fn func(d *MavenArtifactStatusDie)) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		d := MavenArtifactStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *MavenArtifactDie) Spec(v sourcev1alpha1.MavenArtifactSpec) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		r.Spec = v
	})
}

func (d *MavenArtifactDie) Status(v sourcev1alpha1.MavenArtifactStatus) *MavenArtifactDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifact) {
		r.Status = v
	})
}

var MavenArtifactSpecBlank = (&MavenArtifactSpecDie{}).DieFeed(sourcev1alpha1.MavenArtifactSpec{})

type MavenArtifactSpecDie struct {
	mutable bool
	r       sourcev1alpha1.MavenArtifactSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MavenArtifactSpecDie) DieImmutable(immutable bool) *MavenArtifactSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MavenArtifactSpecDie) DieFeed(r sourcev1alpha1.MavenArtifactSpec) *MavenArtifactSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MavenArtifactSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MavenArtifactSpecDie) DieFeedPtr(r *sourcev1alpha1.MavenArtifactSpec) *MavenArtifactSpecDie {
	if r == nil {
		r = &sourcev1alpha1.MavenArtifactSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *MavenArtifactSpecDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.MavenArtifactSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *MavenArtifactSpecDie) DieRelease() sourcev1alpha1.MavenArtifactSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MavenArtifactSpecDie) DieReleasePtr() *sourcev1alpha1.MavenArtifactSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MavenArtifactSpecDie) DieStamp(fn func(r *sourcev1alpha1.MavenArtifactSpec)) *MavenArtifactSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MavenArtifactSpecDie) DeepCopy() *MavenArtifactSpecDie {
	r := *d.r.DeepCopy()
	return &MavenArtifactSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Maven Artifact defines meta Type
func (d *MavenArtifactSpecDie) Artifact(v sourcev1alpha1.MavenArtifactType) *MavenArtifactSpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactSpec) {
		r.Artifact = v
	})
}

// Repository defines the parameters for accessing a repository
func (d *MavenArtifactSpecDie) Repository(v sourcev1alpha1.Repository) *MavenArtifactSpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactSpec) {
		r.Repository = v
	})
}

// Interval at which to check the repository for updates.
func (d *MavenArtifactSpecDie) Interval(v metav1.Duration) *MavenArtifactSpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactSpec) {
		r.Interval = v
	})
}

// Timeout for artifact download operation. Defaults to 'Interval' duration.
func (d *MavenArtifactSpecDie) Timeout(v *metav1.Duration) *MavenArtifactSpecDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactSpec) {
		r.Timeout = v
	})
}

var MavenArtifactStatusBlank = (&MavenArtifactStatusDie{}).DieFeed(sourcev1alpha1.MavenArtifactStatus{})

type MavenArtifactStatusDie struct {
	mutable bool
	r       sourcev1alpha1.MavenArtifactStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MavenArtifactStatusDie) DieImmutable(immutable bool) *MavenArtifactStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MavenArtifactStatusDie) DieFeed(r sourcev1alpha1.MavenArtifactStatus) *MavenArtifactStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MavenArtifactStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MavenArtifactStatusDie) DieFeedPtr(r *sourcev1alpha1.MavenArtifactStatus) *MavenArtifactStatusDie {
	if r == nil {
		r = &sourcev1alpha1.MavenArtifactStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *MavenArtifactStatusDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.MavenArtifactStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *MavenArtifactStatusDie) DieRelease() sourcev1alpha1.MavenArtifactStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MavenArtifactStatusDie) DieReleasePtr() *sourcev1alpha1.MavenArtifactStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MavenArtifactStatusDie) DieStamp(fn func(r *sourcev1alpha1.MavenArtifactStatus)) *MavenArtifactStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MavenArtifactStatusDie) DeepCopy() *MavenArtifactStatusDie {
	r := *d.r.DeepCopy()
	return &MavenArtifactStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *MavenArtifactStatusDie) Status(v apis.Status) *MavenArtifactStatusDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactStatus) {
		r.Status = v
	})
}

// URL is the download link for the artifact output of the last repository sync.
func (d *MavenArtifactStatusDie) URL(v string) *MavenArtifactStatusDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactStatus) {
		r.URL = v
	})
}

// Artifact represents the output of the last successful repository sync.
func (d *MavenArtifactStatusDie) Artifact(v *sourcev1alpha1.Artifact) *MavenArtifactStatusDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactStatus) {
		r.Artifact = v
	})
}

var MavenArtifactTypeBlank = (&MavenArtifactTypeDie{}).DieFeed(sourcev1alpha1.MavenArtifactType{})

type MavenArtifactTypeDie struct {
	mutable bool
	r       sourcev1alpha1.MavenArtifactType
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MavenArtifactTypeDie) DieImmutable(immutable bool) *MavenArtifactTypeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MavenArtifactTypeDie) DieFeed(r sourcev1alpha1.MavenArtifactType) *MavenArtifactTypeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MavenArtifactTypeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MavenArtifactTypeDie) DieFeedPtr(r *sourcev1alpha1.MavenArtifactType) *MavenArtifactTypeDie {
	if r == nil {
		r = &sourcev1alpha1.MavenArtifactType{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactTypeDie) DieFeedRawExtension(raw runtime.RawExtension) *MavenArtifactTypeDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.MavenArtifactType{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *MavenArtifactTypeDie) DieRelease() sourcev1alpha1.MavenArtifactType {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MavenArtifactTypeDie) DieReleasePtr() *sourcev1alpha1.MavenArtifactType {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *MavenArtifactTypeDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MavenArtifactTypeDie) DieStamp(fn func(r *sourcev1alpha1.MavenArtifactType)) *MavenArtifactTypeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MavenArtifactTypeDie) DeepCopy() *MavenArtifactTypeDie {
	r := *d.r.DeepCopy()
	return &MavenArtifactTypeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Artifact Group ID
func (d *MavenArtifactTypeDie) GroupId(v string) *MavenArtifactTypeDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactType) {
		r.GroupId = v
	})
}

// Artifact Version The version element identifies the current version of the artifact. Supported values: "0.1.2" (version) and "RELEASE" Unsupported values: "LATEST", "SNAPSHOT" and Maven Version Ranges https://maven.apache.org/enforcer/enforcer-rules/versionRanges.html
func (d *MavenArtifactTypeDie) Version(v string) *MavenArtifactTypeDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactType) {
		r.Version = v
	})
}

// Artifact identifier
func (d *MavenArtifactTypeDie) ArtifactId(v string) *MavenArtifactTypeDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactType) {
		r.ArtifactId = v
	})
}

// Package type (jar, war, pom), defaults to jar
func (d *MavenArtifactTypeDie) Type(v string) *MavenArtifactTypeDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactType) {
		r.Type = v
	})
}

// Classifier distinguishes artifacts that were built from the same POM but differed in content
func (d *MavenArtifactTypeDie) Classifier(v string) *MavenArtifactTypeDie {
	return d.DieStamp(func(r *sourcev1alpha1.MavenArtifactType) {
		r.Classifier = v
	})
}

var RepositoryBlank = (&RepositoryDie{}).DieFeed(sourcev1alpha1.Repository{})

type RepositoryDie struct {
	mutable bool
	r       sourcev1alpha1.Repository
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *RepositoryDie) DieImmutable(immutable bool) *RepositoryDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *RepositoryDie) DieFeed(r sourcev1alpha1.Repository) *RepositoryDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &RepositoryDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *RepositoryDie) DieFeedPtr(r *sourcev1alpha1.Repository) *RepositoryDie {
	if r == nil {
		r = &sourcev1alpha1.Repository{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *RepositoryDie) DieFeedRawExtension(raw runtime.RawExtension) *RepositoryDie {
	b, _ := json.Marshal(raw)
	r := sourcev1alpha1.Repository{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *RepositoryDie) DieRelease() sourcev1alpha1.Repository {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *RepositoryDie) DieReleasePtr() *sourcev1alpha1.Repository {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *RepositoryDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *RepositoryDie) DieStamp(fn func(r *sourcev1alpha1.Repository)) *RepositoryDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *RepositoryDie) DeepCopy() *RepositoryDie {
	r := *d.r.DeepCopy()
	return &RepositoryDie{
		mutable: d.mutable,
		r:       r,
	}
}

// URL is the HTTPS address of the repository. HTTP is not supported.
func (d *RepositoryDie) URL(v string) *RepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.Repository) {
		r.URL = v
	})
}

// SecretRef can be given the name of a secret containing Authentication data.
//
// For Basic Authentication use - username: <BASE64> password: <BASE64>
//
// For mTLS authenticationa use - certFile: <BASE64> a PEM-encoded client certificate - keyFile: <BASE64> private key
//
// For a Certificate Authority to trust while connecting use - caFile: <BASE64> a PEM-encoded CA certificate
func (d *RepositoryDie) SecretRef(v corev1.LocalObjectReference) *RepositoryDie {
	return d.DieStamp(func(r *sourcev1alpha1.Repository) {
		r.SecretRef = v
	})
}
